// <auto-generated />
using System;
using ApplicationDemo.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApplicationDemo.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230405003126_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13d8be41-0c0d-41fa-95c3-6c625978cea1"),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("822a3a81-448c-4977-bac8-937ef816d63b"),
                            Name = "Tablet"
                        },
                        new
                        {
                            Id = new Guid("50c3d300-5b8e-424e-b31e-49128b719dfb"),
                            Name = "LabTop"
                        });
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.CategoryBrands", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatgoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatgoryId");

                    b.ToTable("CategoryBrands");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.CategoryProps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatgoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CatgoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("CategoryProps");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountRatio")
                        .HasColumnType("float");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("ShippmentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.DeviceProps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PropertyId");

                    b.ToTable("DeviceProps");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.CategoryBrands", b =>
                {
                    b.HasOne("ApplicationDemo.Domain.Entities.Brand", "Brand")
                        .WithMany("CategoryBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDemo.Domain.Entities.Category", "Category")
                        .WithMany("CategoryBrands")
                        .HasForeignKey("CatgoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.CategoryProps", b =>
                {
                    b.HasOne("ApplicationDemo.Domain.Entities.Category", "Category")
                        .WithMany("CategoryProps")
                        .HasForeignKey("CatgoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDemo.Domain.Entities.Property", "Property")
                        .WithMany("CategoryProps")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Device", b =>
                {
                    b.HasOne("ApplicationDemo.Domain.Entities.Brand", "Brand")
                        .WithMany("Devices")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDemo.Domain.Entities.Category", "Category")
                        .WithMany("Devices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.DeviceProps", b =>
                {
                    b.HasOne("ApplicationDemo.Domain.Entities.Device", "Device")
                        .WithMany("DeviceProps")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDemo.Domain.Entities.Property", "Property")
                        .WithMany("DeviceProps")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Offer", b =>
                {
                    b.HasOne("ApplicationDemo.Domain.Entities.Device", "Device")
                        .WithMany("Offers")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Brand", b =>
                {
                    b.Navigation("CategoryBrands");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategoryBrands");

                    b.Navigation("CategoryProps");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Device", b =>
                {
                    b.Navigation("DeviceProps");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("ApplicationDemo.Domain.Entities.Property", b =>
                {
                    b.Navigation("CategoryProps");

                    b.Navigation("DeviceProps");
                });
#pragma warning restore 612, 618
        }
    }
}
